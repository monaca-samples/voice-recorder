<template>
  <div class="page" data-name="catalog">
    <div class="navbar">
      <div class="navbar-bg"></div>
      <div class="navbar-inner sliding">
        <div class="title">Voice Recorder</div>
      </div>
    </div>
    <div class="page-content">
      <!-- Display buttons based on recording status -->
      ${ status == 'ready' ?
        $h`<button class="button button-large button-fill" @click=${start}>Start Recording</button>` :
        $h`<button class="button button-large button-fill" @click=${stop}>Stop Recording</button>`
      }
      <p>
        ${ playable &&
            $h`
                <div class="block-title">Recorded Audio</div> 
                <button class="button button-large button-fill" @click=${listen}>Play</button>
            `
        }
      </p>
    </div>
  </div>
</template>
<script>
  export default (props, { $update }) => {
  let recorder;
  let audioData = [];
  let status = 'ready';
  let playable = false;
  let mediaRec; // cordova-plugin-media recorder

  document.addEventListener('deviceready', onDeviceReady, false);

  function onDeviceReady() {
      // Cordova is now fully loaded. Now you can safely use Cordova plugins.
      console.log("Cordova is ready, and the Media plugin can be used.");
  }

  // Start recording
  const start = async (e) => {
    e.preventDefault();
    // cordova-plugin-media for recording
    const src = "myRecording.wav"; // File name to store the recording
    mediaRec = new Media(src,
      () => console.log("Record Success"),
      (err) => console.error("Record Error:", err)
    );
    mediaRec.startRecord();
    status = 'recording';
    $update();
  };

  const _dataavailable = (e) => {
    audioData.push(e.data);
  }

  // Stop recording
  const stop = (e) => {
    e.preventDefault();
    mediaRec.stopRecord();
    status = 'ready';
    playable = true;
    $update();
  }

  // Play recorded audio
  const listen = async () => {
    // Use cordova-plugin-media for playback
    mediaRec.play();
  }

  return $render;
}
</script>